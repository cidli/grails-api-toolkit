/* JSON API Object
*
* simple json object that can be defined outside of any application
* whose definition and rules can apply universally to request and
* response api object thus allowing interpretation/application of
* the object to happen in the application itself and enable definition
* to happen externally.
*
* This enables all definitions to be read in, applied, interpreted
* and used without tying them to any particular framework or language.
*
* DEFINITIONS
* 
* 'key':'self'(evaluates as LONG) > primary key, reference to self
* 'key':'table/domain reference'(evaluates as LONG) > foreign key and referenced table/domain
* 'key':'self/table/domain reference(STRING)' > index;reference to self,table or domain
* 
* 'type': Long/String/Boolean/BigDecimal/Float/URL/Email
* 'description': description of variable, how it is used. mainly for apidocs

* RULES
*
* 'expect' is required data for incoming PUT/POST request to validate api object.
* 'return' is required data for outgoing GET response to validate api object.
* 'roles' allows you to set privileges on individual variables to return partial datasets. 'actions' 
*    can use this rule too but is not overridden; is considered a 'local' rule.
* 'mockData' allows you to set default data on the variable. This can be dynamic or static
*
* RULES GROUPS:
*
* 'actions' : default rules for each controller / action; child is overridden by parent
*
* The override atomicity for rules is:
*
* methods(GET/PUT/POST/DELETE) < action < value
* 
* with 'values' rules being overridden by controller action/method rules.
* 
*/

{
    "Test": {
        "VALUES": {
            "id": {
            	"key":"self",
            	"type":"Long",
            	"description":"",
            	"expect":"true",
            	"return":"false",
            },
            "testdata": {
            	"type":"String",
            	"description":"",
            	"expect":"true",
            	"return":"true",
            	"roles": ["ROLE_ADMIN","ROLE_USER"]
            }
        },
        "RULES":{
        	"METHODS":{
	        	"PUT":{
	        		"id":{"expect":"false"},
	        	},
	        },
	        "URI":{
				"test/show":{
					"testdata":{"mockData": "blahblahblah"}
				},
				"test/create":{
					"testdata":{"mockData": "createMock"}
				}
			}
		}
    }
}