package ${packageName}

import org.springframework.dao.DataIntegrityViolationException
import net.nosegrind.apitoolkit.*

class HookController {

	def springSecurityService
	def hookService

	static defaultAction = 'list'

	def list() {
		if(springSecurityService.isLoggedIn()){
			def user = springSecurityService.principal.id
			def webhookList = isSuperuser() ? Hook.list(params) : Hook.findAllByUser(user, [max:params.max, sort:params.sort, order:params.order, offset:params.offset] )
			params.max = Math.min(params.max ? params.int('max') : 10, 100)
			
			LinkedHashMap model = [:]
			respond model as Object, [model: [webhookInstanceList: webhookList, webhookInstanceTotal: webhookList.size()]]
		}else{
			render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'User not logged in. Cannot complete request')
		}
		return null	
	}

	def show() {
		if(springSecurityService.isLoggedIn()){
			def user = springSecurityService.principal.id
			def webhookInstance = isSuperuser() ? Hook.get(params.id) : Hook.findBy${userClassName}AndId(user,params.id.toLong())
	
			if (webhookInstance) {
				LinkedHashMap model = [:]
				respond model as Object,  [model:[webhookInstance: webhookInstance]]
			}else{
				render(status:HttpServletResponse.SC_NOT_FOUND, text: 'Hook not found. Check your data and try again')
			}
		}else{
			render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'User not logged in. Cannot complete request')
		}
		return null
	}
	
	def create() {
		if(springSecurityService.isLoggedIn()){
			def user = springSecurityService.principal.id
			def formats = ['JSON','XML']
			Hook webhookInstance = Hook.findByUrlAndService(params.url,params.service)
			if(webhookInstance){
				render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'Hook for that service and url already exists. Please check your data and try again.')
			}
	
			if(!HookService.validateUrl(params.url)){
				render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'Url must be FQDN or IP Address formmatted with HTTP/HTTPS. Please try again.')
			}
	
			webhookInstance = new Hook()
			webhookInstance.user = user
			webhookInstance.name = params.name
			webhookInstance.url = params.url
			webhookInstance.format = params.format
			webhookInstance.service = params.service
			
			Date now = new Date()
			webhookInstance.creationDate = now
			webhookInstance.modifiedDate = now
	
			if (!webhookInstance.save(flush: true)) {
				render(status:HttpServletResponse.SC_NOT_FOUND, text: 'Could not save Hook. Check your data and try again')
			}else{
				respond Hook.get(webhookInstance.id.toLong())
			}
		}else{
			render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'User not logged in. Cannot complete request')
		}
		return null
	}

	def update() {
		if(springSecurityService.isLoggedIn()){
			def user = springSecurityService.principal.id
	
			Hook webhookInstance = Hook.findByIdAnd${userClassName}(params.id, user)
			if(!webhookInstance){
				render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'No webhook with that ID belonging to current User found. Check your data and try again')
			}else{
				webhookInstance.name = params.name
				webhookInstance.url = params.url
				webhookInstance.format = params.format
				webhookInstance.service = params.service
		
				if (!webhookInstance.save(flush: true)) {
					render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'INVALID DATA. Could not complete update. Please see docs for required data and try again.')
				}else{
					respond Hook.get(webhookInstance.id.toLong())
				}
			}
		}else{
			render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'User not logged in. Cannot complete request')
		}
		return null
	}

	def delete() {
		if(springSecurityService.isLoggedIn()){
			def user = springSecurityService.principal.id
	
			def webhookInstance = isSuperuser() ? Hook.get(params.id) : Hook.findBy${userClassName}AndId(user,params.id.toLong())
	
			if(!webhookInstance){
				render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'No webhook with that ID belonging to current User found. Check your data and try again')
			}else{
				if(!webhookInstance.delete(flush: true)){
					render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'INVALID DATA. Could not delete webhook due to dependencies. Please consult with database administrator.')
				}else{
					LinkedHashMap model = [id:params.id]
					respond model as Object
				}
			}
		}else{
			render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'User not logged in. Cannot complete request')
		}
		return null
	}

	def reset() {
		if(springSecurityService.isLoggedIn()){
			def user = springSecurityService.principal.id

			Hook webhookInstance = Hook.findByIdAndUser(params.id, user)
			if(!webhookInstance){
				render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'No webhook with that ID belonging to current User found. Check your data and try again')
			}
	
			webhookInstance.attempts = 0
	
			if (!webhookInstance.save(flush: true)) {
				render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'INVALID DATA. Could not reset webhook. Please consult with database administrator.')
			}else{
				LinkedHashMap model = [id:params.id]
				respond model as Object
			}
		}else{
			render(status:HttpServletResponse.SC_BAD_REQUEST, text: 'User not logged in. Cannot complete request')
		}
		return null
	}

	protected boolean isSuperuser() {
		springSecurityService.principal.authorities*.authority.any { grailsApplication.config.apitoolkit.admin.roles.contains(it) }
	}
}
